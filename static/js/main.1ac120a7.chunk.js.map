{"version":3,"sources":["AddTask.tsx","TaskEditor.tsx","TaskList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddTask","state","task","owner","onChange","event","setState","target","value","onClick","props","onAdd","Component","TaskEditor","onDelete","FORMAT","React","useState","RichTextEditor","createValueFromString","editorValue","setEditorValue","toString","className","toolbarConfig","display","INLINE_STYLE_BUTTONS","label","style","BLOCK_TYPE_DROPDOWN","BLOCK_TYPE_BUTTONS","TaskList","tasks","map","index","key","App","newState","filter","index2","persistState","storageTasks","localStorage","getItem","TASKS","JSON","parse","Array","this","window","setItem","stringify","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ac120a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport \"./App.css\";\n\nclass AddTask extends Component<{ onAdd: (task: Task) => void }, Task> {\n  state = {\n    task: \"\",\n    owner: \"\"\n  };\n\n  render() {\n    return (\n      <div>\n        <label>\n          Owner\n          <input\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.setState({ ...this.state, owner: event.target.value });\n            }}\n          />\n        </label>\n        <label>\n          Task\n          <textarea\n            onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => {\n              this.setState({ ...this.state, task: event.target.value });\n            }}\n          />\n        </label>\n        <button onClick={() => this.props.onAdd(this.state)}>\n          Add new task\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React, { FunctionComponent } from \"react\";\nimport Task from \"./Task\";\nimport \"./App.css\";\nimport RichTextEditor, { EditorValue } from \"react-rte\";\n\nexport const TaskEditor: FunctionComponent<{\n  task: Task;\n  onDelete: () => void;\n  onChange: (task: Task) => void;\n}> = ({ task, onDelete, onChange }) => {\n  const toolbarConfig = {\n    // Optionally specify the groups to display (displayed in the order listed).\n    display: [],\n    INLINE_STYLE_BUTTONS: [\n      { label: \"Bold\", style: \"BOLD\", className: \"custom-css-class\" },\n      { label: \"Italic\", style: \"ITALIC\" },\n      { label: \"Underline\", style: \"UNDERLINE\" }\n    ],\n    BLOCK_TYPE_DROPDOWN: [\n      { label: \"Normal\", style: \"unstyled\" },\n      { label: \"Heading Large\", style: \"header-one\" },\n      { label: \"Heading Medium\", style: \"header-two\" },\n      { label: \"Heading Small\", style: \"header-three\" }\n    ],\n    BLOCK_TYPE_BUTTONS: [\n      { label: \"UL\", style: \"unordered-list-item\" },\n      { label: \"OL\", style: \"ordered-list-item\" }\n    ]\n  };\n\n  const FORMAT = \"markdown\";\n\n  const [editorValue, setEditorValue] = React.useState(\n    RichTextEditor.createValueFromString(task.task, FORMAT)\n  );\n\n  if (editorValue.toString(FORMAT) !== task.task) {\n    setEditorValue(RichTextEditor.createValueFromString(task.task, FORMAT));\n  }\n\n  return (\n    <div>\n      <div className=\"task\">\n        <div className=\"taskHeader\">\n          <input\n            className=\"ownerName\"\n            value={task.owner}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              onChange({\n                task: editorValue.toString(FORMAT),\n                owner: event.target.value\n              });\n            }}\n          />\n          <button className=\"deleteButton\" onClick={() => onDelete()}>\n            X\n          </button>\n        </div>\n        <RichTextEditor\n          className=\"taskEditor\"\n          toolbarConfig={toolbarConfig}\n          onChange={(value: EditorValue) => {\n            setEditorValue(value);\n            onChange({\n              task: value.toString(FORMAT),\n              owner: task.owner\n            });\n          }}\n          value={editorValue}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default TaskEditor;\n","import React, { FunctionComponent } from \"react\";\nimport Task from \"./Task\";\nimport \"./App.css\";\nimport TaskEditor from \"./TaskEditor\";\n\nexport const TaskList: FunctionComponent<{\n  tasks: Task[];\n  onDelete: (index: number) => void;\n  onChange: (task: Task, index: number) => void;\n}> = ({ tasks, onDelete, onChange }) => {\n  return (\n    <div>\n      {tasks.map((task: Task, index: number) => {\n\n        return (\n          <TaskEditor\n            key={index}\n            task={task}\n            onChange={(task: Task) => {\n              onChange(task, index);\n            }}\n            onDelete={() => {\n              onDelete(index);\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React from \"react\";\nimport \"./App.css\";\nimport AddTask from \"./AddTask\";\nimport Task from \"./Task\";\nimport TaskList from \"./TaskList\";\n\ninterface State {\n  tasks: Task[];\n}\n\nclass App extends React.Component<{}, State> {\n  private static readonly TASKS = \"tasks\";\n\n  constructor(props: {}) {\n    super(props);\n    const storageTasks = localStorage.getItem(App.TASKS);\n    if (storageTasks) {\n      this.state = JSON.parse(storageTasks) as State;\n    } else {\n      this.state = {\n        tasks: new Array<Task>()\n      };\n    }\n  }\n\n  private onDelete = (index: number) => {\n    const newState = {\n      tasks: this.state.tasks.filter((task, index2) => index !== index2)\n    };\n    this.persistState(newState);\n  };\n\n  private onAdd = (task: Task) => {\n    const newState = { tasks: [...this.state.tasks, task] };\n    this.persistState(newState);\n  };\n\n  private persistState(newState: { tasks: Task[] }) {\n    this.setState(newState);\n    window.localStorage.setItem(App.TASKS, JSON.stringify(newState));\n  }\n\n  onChange = (task: Task, index: number) => {\n    const newState = { tasks: [...this.state.tasks] };\n    newState.tasks[index] = task;\n    this.persistState(newState);\n  };\n\n  render() {\n    return (\n      <div>\n        <AddTask onAdd={this.onAdd} />\n        <TaskList\n          tasks={this.state.tasks}\n          onDelete={this.onDelete}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}